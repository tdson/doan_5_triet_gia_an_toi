/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gmail;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.Vector;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import main.Program;

/**
 *
 * @author SONTD
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    private DefaultTableModel model;
    private Thread sendMail;
    private Vector<File> filesAttached = new Vector<File>();
    private long totalFilesSize = 0;
    private String fullMessage = "";
    private String signature;
    private String mainMessage;
    private final String TITLE = "Đồ Án Cơ Sở Ngành Mạng | Fast Gmail Sender";

    public View(Program m) {
        Vector<String> header = new Vector<String>();
        header.add("Tên tập tin");
        header.add("Kích thước");
        model = new DefaultTableModel(null, header) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        setTitle(TITLE);
        initComponents();
        setVisible(true);
        FramePosition.setCenterPosition(this);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false);
                dispose();
                m.requestMaximize();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pLogin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        tfDomain = new javax.swing.JLabel();
        tfPass = new javax.swing.JPasswordField();
        tfAlias = new javax.swing.JTextField();
        pEmail = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfTo = new javax.swing.JTextField();
        tfSubject = new javax.swing.JTextField();
        scrollText = new javax.swing.JScrollPane();
        emailText = new javax.swing.JTextArea();
        addSignature = new javax.swing.JCheckBox();
        scrollSign = new javax.swing.JScrollPane();
        signatureText = new javax.swing.JTextArea();
        btSend = new javax.swing.JButton();
        btNew = new javax.swing.JButton();
        pAttachFile = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable() {

            public Component prepareRenderer
            (TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected
                if (Index_row % 2 == 0)
                comp.setBackground(Color.LIGHT_GRAY);

                if(isCellSelected(Index_row, Index_col)){
                    comp.setBackground(Color.GRAY);
                }
                return comp;
            }

        };
        btAddFile = new javax.swing.JButton();
        btDelFile = new javax.swing.JButton();
        lbNoOfFiles = new javax.swing.JLabel();
        lbTotalSize = new javax.swing.JLabel();
        pStatus = new javax.swing.JPanel();
        lbStatus = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        pLogin.setBorder(javax.swing.BorderFactory.createTitledBorder("Đăng Nhập"));

        jLabel1.setText("Email");

        jLabel2.setText("Mật khẩu");

        jLabel3.setText("Tên thay thế");

        tfEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmailActionPerformed(evt);
            }
        });

        tfDomain.setText("@gmail.com");

        javax.swing.GroupLayout pLoginLayout = new javax.swing.GroupLayout(pLogin);
        pLogin.setLayout(pLoginLayout);
        pLoginLayout.setHorizontalGroup(
            pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pLoginLayout.createSequentialGroup()
                        .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfEmail)
                            .addComponent(tfPass))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDomain)
                        .addGap(6, 6, 6))
                    .addComponent(tfAlias))
                .addContainerGap())
        );
        pLoginLayout.setVerticalGroup(
            pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDomain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pEmail.setBorder(javax.swing.BorderFactory.createTitledBorder("Thư mới"));

        jLabel5.setText("Người nhận");

        jLabel6.setText("Chủ đề");

        emailText.setColumns(20);
        emailText.setRows(5);
        emailText.setTabSize(4);
        emailText.setWrapStyleWord(true);
        emailText.setLineWrap(true);
        scrollText.setViewportView(emailText);

        addSignature.setSelected(true);
        addSignature.setText("Kèm chữ ký");
        addSignature.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addSignatureItemStateChanged(evt);
            }
        });
        addSignature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSignatureActionPerformed(evt);
            }
        });

        signatureText.setColumns(20);
        signatureText.setRows(5);
        signatureText.setTabSize(4);
        signatureText.setText("Gửi từ Fast Gmail Sender trên máy tính của tôi.");
        signatureText.setWrapStyleWord(true);
        signatureText.setLineWrap(true);
        scrollSign.setViewportView(signatureText);

        btSend.setText("Gửi");
        btSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSendActionPerformed(evt);
            }
        });

        btNew.setText("Thư mới");
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pEmailLayout = new javax.swing.GroupLayout(pEmail);
        pEmail.setLayout(pEmailLayout);
        pEmailLayout.setHorizontalGroup(
            pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEmailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollText)
                    .addGroup(pEmailLayout.createSequentialGroup()
                        .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTo)
                            .addComponent(tfSubject)))
                    .addGroup(pEmailLayout.createSequentialGroup()
                        .addComponent(scrollSign, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btNew, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                    .addGroup(pEmailLayout.createSequentialGroup()
                        .addComponent(addSignature, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pEmailLayout.setVerticalGroup(
            pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEmailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollText, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addSignature)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollSign, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pEmailLayout.createSequentialGroup()
                        .addComponent(btSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btNew)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pAttachFile.setBorder(javax.swing.BorderFactory.createTitledBorder("Đính kèm tập tin"));

        fileTable.setModel(model);
        fileTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        fileTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        fileTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane3.setViewportView(fileTable);

        btAddFile.setText("Thêm");
        btAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddFileActionPerformed(evt);
            }
        });

        btDelFile.setText("Xóa");
        btDelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelFileActionPerformed(evt);
            }
        });

        lbNoOfFiles.setText("Tập tin: 0");

        lbTotalSize.setText("Tổng kích thước: 0");

        javax.swing.GroupLayout pAttachFileLayout = new javax.swing.GroupLayout(pAttachFile);
        pAttachFile.setLayout(pAttachFileLayout);
        pAttachFileLayout.setHorizontalGroup(
            pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAttachFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAttachFileLayout.createSequentialGroup()
                        .addComponent(lbNoOfFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbTotalSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pAttachFileLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btAddFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btDelFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(17, 17, 17))
        );
        pAttachFileLayout.setVerticalGroup(
            pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAttachFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAttachFileLayout.createSequentialGroup()
                        .addComponent(btAddFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDelFile)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pAttachFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNoOfFiles)
                    .addComponent(lbTotalSize))
                .addContainerGap())
        );

        progressBar.setIndeterminate(true);

        javax.swing.GroupLayout pStatusLayout = new javax.swing.GroupLayout(pStatus);
        pStatus.setLayout(pStatusLayout);
        pStatusLayout.setHorizontalGroup(
            pStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pStatusLayout.createSequentialGroup()
                .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pStatusLayout.setVerticalGroup(
            pStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbStatus)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pStatusLayout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pStatus.add(lbStatus, java.awt.BorderLayout.WEST);
        progressBar.setIndeterminate(true);
        progressBar.setVisible(false);
        pStatus.add(progressBar, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pAttachFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pAttachFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(pStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfEmailActionPerformed

    private void addSignatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSignatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addSignatureActionPerformed

    // Attach files to email
    private void btAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        // Allows select many files
        chooser.setMultiSelectionEnabled(true);
        int c = chooser.showOpenDialog(this);
        if (c == JFileChooser.CANCEL_OPTION) {
            return;
        }

        File[] files = chooser.getSelectedFiles();
        if (!files.equals(null)) {
            try {

                int index = 0;
                for (File f : files) {
                    totalFilesSize += f.length();
                    String theSize = this.formatSize(f.length());
                    model.addRow(new Object[]{f.getName(), theSize});
                    index++;
                }

                this.addFiles(files);
                lbNoOfFiles.setText("<html><body>Tập tin: <font color=blue>" + filesAttached.size() + "</font></body></html>");
                lbTotalSize.setText("<html><body>Tổng kích thước: <font color=blue>" + this.formatSize(totalFilesSize) + "</font></body></html>");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btAddFileActionPerformed

    // Phương thức kiểm tra email
    private boolean isValidEmail(String idEmail) {
    	// Bieu thuc chinh quy cua email dung de so khop voi email nhap vao
    	String emailReg = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
    	if(idEmail.matches(emailReg))
    		return true;
    	else
    		return false;
    }
    
    // Phương thức tính toán và trả về dung lượng file đã format
    private String formatSize(long size) {
        double temp = size;
        String result = size + "bytes";
        if(size > (1024 * 1024)) {
            temp = (double) size / (1024 * 1024);
            temp = (double) Math.round(temp * 100) / 100;
            result = temp + "MB";
        } else {
            //if(size > 1024) {
            temp = (double) size / (1024);
            temp = (double) Math.round(temp * 100) / 100;
            result = temp + "KB";
            //}
        }
        return result;
    }
    
    private void addFiles(File[] files) {
        for (File f : files) {
            this.filesAttached.add(f);
        }
    }

    private void btDelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelFileActionPerformed
        int[] rowSelected = fileTable.getSelectedRows();
        int removed = 0;
        for(int i : rowSelected) {
            model.removeRow(i - removed);
            totalFilesSize -= filesAttached.get(i - removed).length();
            filesAttached.remove(i - removed);
            removed++;
        }
        lbNoOfFiles.setText("<html><body>Tập tin: <font color=blue>" + filesAttached.size() + "</font></body></html>");
        lbTotalSize.setText("<html><body>Tổng kích thước: <font color=blue>" + this.formatSize(totalFilesSize) + "</font></body></html>");
    }//GEN-LAST:event_btDelFileActionPerformed

    private void btSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSendActionPerformed
        final String email = tfEmail.getText();
        final char[] password = tfPass.getPassword();
        final String recipient = tfTo.getText();
        final String subject = tfSubject.getText();
        mainMessage = emailText.getText();
        signature = signatureText.getText();
        
        String[] recipientArray = recipient.split(",");
        for(int i = 0; i < recipientArray.length; i++) {
            recipientArray[i] = recipientArray[i].trim();
        }
        
        if(addSignature.isSelected())
            fullMessage = mainMessage + "\n\n-----\n" + signature;
        else
            fullMessage = mainMessage;
        // System.out.println(fullMessage);
        
        if(email.equals(null) || email.equals("")) {
            JOptionPane.showMessageDialog(this, "Email đăng nhập không được bỏ trống. Vui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!this.isValidEmail(email + "@gmail.com")) {
            JOptionPane.showMessageDialog(this, "Email không đúng. Vui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(password.equals(null) || password.length == 0) {
            JOptionPane.showMessageDialog(this, "Không được bỏ trống Mật khẩu đăng nhập. Vui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(password.equals(null) || password.length < 8) {
            JOptionPane.showMessageDialog(this, "Mật khẩu không đúng. Vui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(recipient.equals(null) || recipient.equals("")) {
            JOptionPane.showMessageDialog(this, "Địa chỉ email người nhận không được bỏ trống.\nVui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for(String rev : recipientArray) {
            if(!this.isValidEmail(rev)) {
                JOptionPane.showMessageDialog(this, "Email người nhận không đúng. Vui lòng nhập lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(subject.isEmpty()) {
            if(JOptionPane.NO_OPTION == JOptionPane.showConfirmDialog(this, "Thư chưa đặt tiêu đề, vẫn tiếp tục gửi?", "Thông báo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE))
                return;
        }
            
        if(mainMessage.isEmpty()) {
            if(JOptionPane.NO_OPTION == JOptionPane.showConfirmDialog(this, "Chưa có nội dung thư, vẫn tiếp tục gửi?", "Thông báo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE))
                return;
        }
            
        // Gửi mail đi
        sendMail = new Thread() {
            @Override
            public void run() {
                progressBar.setVisible(true);
                btSend.setEnabled(false);
                
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                try {
                    // send mail
                    // send(from, Alias.getText(), new String(password), to, chuDe, noiDung.toString(), fileDinhKem);
                    send(email, tfAlias.getText(), new String(password), recipient, subject, fullMessage, filesAttached);
                    lbStatus.setText("Đã gửi thành công!");
                
                } catch (Exception e) {
                    lbStatus.setText(e.getMessage());
                    JOptionPane.showMessageDialog(getOwner(), 
                            "Không thành công.\nKiểm tra lại đường truyền Internet của bạn.\nChắc chắn rằng bạn nhập đúng địa chỉ email và mật khẩu.",
                            "Lỗi", JOptionPane.ERROR_MESSAGE);
                    
                } finally {
                    btSend.setEnabled(true);
                    progressBar.setVisible(false);
                    
                    /*
                    try {
                        Thread.sleep(5000);
                        lbStatus.setText("");
                        
                    } catch (InterruptedException ex) {
                        JOptionPane.showMessageDialog(getOwner(), ex, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                    */
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        };
        sendMail.start();
        System.out.println("Đã gửi!");
        
    }//GEN-LAST:event_btSendActionPerformed

    private void addSignatureItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addSignatureItemStateChanged
        if(addSignature.isSelected()) {
            // signatureText.setEditable(true);
            signatureText.setEnabled(true);
        } else {
            // signatureText.setEditable(false);
            signatureText.setEnabled(false);
        }
    }//GEN-LAST:event_addSignatureItemStateChanged

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        tfTo.setText("");
        tfSubject.setText("");
        emailText.setText("");
        addSignature.setSelected(true);
        signatureText.setEnabled(true);
        
        if(model.getRowCount() > 0)
            for(int i = model.getRowCount() - 1; i > -1; i--)
                model.removeRow(i);
        
        fileTable.setVisible(false);
        fileTable.setVisible(true);
        filesAttached.removeAllElements();
        lbNoOfFiles.setText("<html><body>Tập tin: <font color=blue>" + filesAttached.size() + "</font></body></html>");
        lbTotalSize.setText("<html><body>Tổng kích thước: <font color=blue>" + this.formatSize(totalFilesSize) + "</font></body></html>");
        
    }//GEN-LAST:event_btNewActionPerformed

    /**
     * Phương thức tạo phiên làm việc mới. Tạo đối tượng tin nhắn và gửi đi
     * 
     * @param email Địa chỉ email người gửi
     * @param alias Tên thay thế
     * @param password Mật khẩu đăng nhập
     * @param recipient Địa chỉ email người nhận
     * @param subject Chủ đề email
     * @param fullMessage Nội dung email (Bao gồm chữ ký)
     * @param filesAttached File đính kèm
     */
    public void send(String email, String alias, String password, String recipient, String subject, String fullMessage, Vector<File> filesAttached) throws UnsupportedEncodingException, MessagingException {
        alias = (alias.isEmpty()) ? null : alias;
        // Tạo phiên làm việc    
        Session session = EmailManager.createSessionSMTP(email, password);
        
        // Tạo tin nhắn mới trên Gmail
        Message message  = new MimeMessage(session);

        // Set From and To
        message.setFrom(new InternetAddress(email, alias));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipient, true));
        //Create a message part for the time,location
        MimeMultipart multipart = new MimeMultipart();
        MimeBodyPart bodypart = new MimeBodyPart();
        String htmlText = fullMessage;
        bodypart.setText(htmlText, "UTF-8");
        multipart.addBodyPart(bodypart);
        // Attach files
        if(!filesAttached.equals(null))
            addAtachments(filesAttached, multipart);

        // Set the subject and email content
        message.setSubject(subject);
        message.setContent(multipart);
        message.setSentDate(new Date());
        message.saveChanges();

        lbStatus.setText("Đang gửi thư...");
        // send the email
        Transport.send(message);

        //System.out.println("XONG!");
    }
    
    /**
     * Phương thức đính kèm files vào thư
     * 
     * @param filesAttached Danh sách file đính kèm
     * @param multipart 
     */
    private void addAtachments(Vector<File> filesAttached, MimeMultipart multipart) throws MessagingException, AddressException {
        int i = 0;
        for(File f : filesAttached) {
            i++;
            lbStatus.setText("Đang tải lên: " + f.getName() + ".");
            String fileName = f.getAbsolutePath();
            MimeBodyPart attachmentBody = new MimeBodyPart();
            // add file vào body
            FileDataSource fileDataSource = new FileDataSource(fileName);
            attachmentBody.setDataHandler(new DataHandler(fileDataSource));
            // Đặt tên cho file đính kèm
            attachmentBody.setFileName(f.getName());
            multipart.addBodyPart(attachmentBody);
            
            lbStatus.setText("Tải lên hoàn tất: " + f.getName() + ".");
        }
        
    }
    
    /**
     * @param args the command line arguments
    
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        // If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        // For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        //
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View(null).setVisible(true);
            }
        });
    }
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addSignature;
    private javax.swing.JButton btAddFile;
    private javax.swing.JButton btDelFile;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btSend;
    private javax.swing.JTextArea emailText;
    private javax.swing.JTable fileTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbNoOfFiles;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbTotalSize;
    private javax.swing.JPanel pAttachFile;
    private javax.swing.JPanel pEmail;
    private javax.swing.JPanel pLogin;
    private javax.swing.JPanel pStatus;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollSign;
    private javax.swing.JScrollPane scrollText;
    private javax.swing.JTextArea signatureText;
    private javax.swing.JTextField tfAlias;
    private javax.swing.JLabel tfDomain;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JPasswordField tfPass;
    private javax.swing.JTextField tfSubject;
    private javax.swing.JTextField tfTo;
    // End of variables declaration//GEN-END:variables

}
